{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "datafactorydthat"
		},
		"storagedthatlinkedservice_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'storagedthatlinkedservice'"
		},
		"storagedthatlinkedservice_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://storagedthat.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/storagedthatlinkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('storagedthatlinkedservice_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('storagedthatlinkedservice_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DailyProductRevenueMonthlyParquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storagedthatlinkedservice",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"order_month": {
						"type": "String",
						"defaultValue": "201401"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "retail_db_parquet/Monthly",
						"fileSystem": "data"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "order_date",
						"type": "INT96"
					},
					{
						"name": "order_item_product_id",
						"type": "INT_16"
					},
					{
						"name": "revenue",
						"type": "DOUBLE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storagedthatlinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DailyProductRevenueParquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storagedthatlinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "retail_db_parquet/dailyrevenue",
						"fileSystem": "data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storagedthatlinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrderItemcsv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storagedthatlinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "part-00000",
						"folderPath": "order_items",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storagedthatlinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrderParquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storagedthatlinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "retail_db_parquet/order",
						"fileSystem": "data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storagedthatlinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ordercsv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storagedthatlinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "part-00000",
						"folderPath": "orders",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "1",
						"type": "String"
					},
					{
						"name": "2013-07-25 00:00:00.0",
						"type": "String"
					},
					{
						"name": "11599",
						"type": "String"
					},
					{
						"name": "CLOSED",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storagedthatlinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfFileConverterCsvToParquet')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ordercsv",
								"type": "DatasetReference"
							},
							"name": "orderstream"
						},
						{
							"dataset": {
								"referenceName": "OrderItemcsv",
								"type": "DatasetReference"
							},
							"name": "OrderItems"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DailyProductRevenueParquet",
								"type": "DatasetReference"
							},
							"name": "DailyRevenueParquet"
						}
					],
					"transformations": [
						{
							"name": "orderStatusFilter"
						},
						{
							"name": "OrderJoinOrderItem"
						},
						{
							"name": "DailyProductRevenue"
						}
					],
					"scriptLines": [
						"source(output(",
						"          order_id as integer,",
						"          order_date as timestamp,",
						"          order_customer_id as integer,",
						"          order_status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> orderstream",
						"source(output(",
						"          order_item_id as short,",
						"          order_item_order_id as short,",
						"          order_item_product_id as short,",
						"          order_item_quantity as short,",
						"          order_item_subtotal as double,",
						"          order_item_product_price as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> OrderItems",
						"orderstream filter(order_status=='COMPLETE'|| order_status=='CLOSED') ~> orderStatusFilter",
						"orderStatusFilter, OrderItems join(order_id == order_item_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> OrderJoinOrderItem",
						"OrderJoinOrderItem aggregate(groupBy(order_date,",
						"          order_item_product_id),",
						"     revenue = round(sum(order_item_subtotal),2)) ~> DailyProductRevenue",
						"DailyProductRevenue sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1) ~> DailyRevenueParquet"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ordercsv')]",
				"[concat(variables('factoryId'), '/datasets/OrderItemcsv')]",
				"[concat(variables('factoryId'), '/datasets/DailyProductRevenueParquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfFileConverterCsvToParquet_Param')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ordercsv",
								"type": "DatasetReference"
							},
							"name": "orderstream"
						},
						{
							"dataset": {
								"referenceName": "OrderItemcsv",
								"type": "DatasetReference"
							},
							"name": "OrderItems"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DailyProductRevenueParquet",
								"type": "DatasetReference"
							},
							"name": "DailyRevenueParquet"
						}
					],
					"transformations": [
						{
							"name": "orderStatusFilter"
						},
						{
							"name": "OrderJoinOrderItem"
						},
						{
							"name": "DailyProductRevenue"
						}
					],
					"scriptLines": [
						"source(output(",
						"          order_id as integer,",
						"          order_date as timestamp,",
						"          order_customer_id as integer,",
						"          order_status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> orderstream",
						"source(output(",
						"          order_item_id as short,",
						"          order_item_order_id as short,",
						"          order_item_product_id as short,",
						"          order_item_quantity as short,",
						"          order_item_subtotal as double,",
						"          order_item_product_price as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> OrderItems",
						"orderstream filter(order_status=='COMPLETE'|| order_status=='CLOSED') ~> orderStatusFilter",
						"orderStatusFilter, OrderItems join(order_id == order_item_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> OrderJoinOrderItem",
						"OrderJoinOrderItem aggregate(groupBy(order_date,",
						"          order_item_product_id),",
						"     revenue = round(sum(order_item_subtotal),2)) ~> DailyProductRevenue",
						"DailyProductRevenue sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1) ~> DailyRevenueParquet"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ordercsv')]",
				"[concat(variables('factoryId'), '/datasets/OrderItemcsv')]",
				"[concat(variables('factoryId'), '/datasets/DailyProductRevenueParquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DFFileFormetCsvToParquetOrder')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DFFileFormetCsvToParquetOrder",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfFileConverterCsvToParquet",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"orderstream": {},
									"OrderItems": {},
									"DailyRevenueParquet": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-19T12:15:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfFileConverterCsvToParquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DFFilefFormatConverter')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DFFilefFormatConverter",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfFileConverterCsvToParquet",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"orderstream": {},
									"OrderItems": {},
									"DailyRevenueParquet": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfFileConverterCsvToParquet')]"
			]
		}
	]
}